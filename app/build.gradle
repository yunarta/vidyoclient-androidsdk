plugins {
    id 'io.gitlab.arturbosch.detekt' version '1.0.0.RC6-4'
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

repositories {
    jcenter()
    google()
    maven { url 'https://jitpack.io' }
    maven {
        credentials {
            username 'android'
            password 'android2192'
        }
        authentication {
            basic(BasicAuthentication)
        }
        url 'https://client-ci.vcube.sg:8081/artifactory/blackhole/'
    }
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/reports")
}


android {
    compileSdkVersion 27

    defaultConfig {
        applicationId 'com.vidyo.app.vidyoclient'
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName '1.0'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            testCoverageEnabled true
        }
    }

    sourceSets {
        main {
            java.srcDirs += ['src/main/kotlin']
        }
        test {
            java.srcDirs += ['src/test/kotlin']
        }
        androidTest {
            java.srcDirs += ['src/androidTest/kotlin']
        }
    }

    detekt {
        version = '1.0.0.RC6-4'
        defaultProfile {
            input = file('src/main/kotlin')
            filters = '.*/resources/.*,.*/build/.*'
            config = file('default-detekt-config.yml')
            output = file('reports')
            outputName = 'detekt-report'
            baseline = file('reports/baseline.xml')
        }
    }

    kapt {
        generateStubs = true
    }

    lintOptions {
        disable 'Autofill', 'IconLauncherShape', 'IconMissingDensityFolder'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                }
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ["testDebugUnitTest", "createDebugCoverageReport"]) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Stub.*'
    ]
    // generated classes
    classDirectories = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )

    // sources
    sourceDirectories = files([
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

dependencies {
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation 'org.mockito:mockito-core:2.8.9'
    testImplementation 'com.nhaarman:mockito-kotlin:1.5.0'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.4'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.4'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.7.4'
    testImplementation 'org.powermock:powermock-module-junit4-rule-agent:1.7.4'
    testImplementation "org.powermock:powermock-classloading-xstream:1.7.4"
    testImplementation 'org.robolectric:robolectric:3.6.1'
    testImplementation 'com.github.fabioCollini.daggermock:daggermock:0.8.4'
    testImplementation 'com.github.fabioCollini.daggermock:daggermock-kotlin:0.8.4'
    testImplementation 'org.awaitility:awaitility:3.1.0'

    implementation 'com.google.dagger:dagger:2.15'
    implementation 'com.google.dagger:dagger-android:2.15'
    implementation 'com.google.dagger:dagger-android-support:2.15'

    kapt 'com.google.dagger:dagger-compiler:2.15'
    kaptTest 'com.google.dagger:dagger-compiler:2.15'
    kapt 'com.google.dagger:dagger-android-processor:2.15'
    kaptTest 'com.google.dagger:dagger-android-processor:2.15'

    implementation 'com.vidyo:VidyoClient:4.1.21.7'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
    implementation 'org.javatuples:javatuples:1.2'
    implementation 'com.github.pakoito:RxTuples2:1.0.0'

    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation project(':library')
    testImplementation project(path: ":library", configuration: "unitTestArtifact")
}
